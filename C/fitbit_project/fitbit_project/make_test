#!/usr/bin/python
'''
//  make_test
//  fitbit_project
//
//  Created by Jeffrey Thompson on 2/9/16.
//  Copyright 2016 Jeffrey Thompson. All rights reserved.
//
//  Script for generating tests - I wanted to more thoroughly test my work.
//  produces both the .bin and .out files with randomized data
'''
import sys, os, random

random.seed()


def splash():
    print('''\
This tool is used to generate tests cases for the Fitbit 12bit packed data challenge.
usage: make_test folder_to_put_tests [number_of_tests]
''')

if len(sys.argv) < 2:
    splash();
    exit(-1)

path = sys.argv[1]
if path[0] != '/':
        #relative file path so fill in the rest
    path = '{}/{}'.format(os.getcwd(),path)

    #check if the path exists and try to make it if not
if not os.path.isdir(path):
    if os.path.exists(path):
        print("{} exists and is not a dir!".format(path))
        exit(-1)
    try:
        os.makedirs(path)
        # check for error in creating the dir, display the error
    except OSError as e:
        print("{}\n Could not create dir {}!".format(e.strerror ,path))
        exit(-1)

try:
        # tests count
    count = int(sys.argv[2]) if len(sys.argv) >= 3 else 1
    if count < 0:
        raise ValueError
        # ensure we get a good value
except ValueError as e:
    print("\"{}\" is not an int greater than 0!".format(sys.argv[2] ,path))
    splash();
    exit(-1)

file_id = 1
test_num = 0
MAX_VAL = 2**12-1
while test_num < count:
    file_bin = "{}/test{}.bin".format(path,file_id)
    file_out = "{}/test{}.out".format(path,file_id)
        # check if the file we are to create already exists
    if os.path.exists(file_bin) or os.path.exists(file_out):
        file_id+=1
        continue
    
        # randomize the results
    length = random.randrange(1000)
    value = random.randrange(MAX_VAL)
    trend = random.randrange(-128,128)  #this one is to provide peaks and valleys
    data = []

        # We generate all the data into an array
        # this is not efficient, but oh well this is just a test generation script
    for i in range(length):
            # randomize and mask to ensure data is within range
        value = (value + random.randrange(-128,128)+trend) & MAX_VAL
            # adjust the trend every 16 values
        if i^15 == 0:
            trend = random.randrange(-128,128)
        data.append(value)

        # make the .bin file
    with open(file_bin, mode='wb') as fbin:
        packed = 0
        which = 0
        for value in data:
                # pack them in
            if which == 0:
                packed = value<<12
                which = 1
            else:
                packed |= value
                    # spit them out
                fbin.write(bytearray((packed>>16, (packed>>8) & 255, packed & 255)))
                    # do it again
                packed = 0
                which = 0
            # in the odd length case we put just a nibble after the first value
        if which == 1:
            fbin.write(bytearray((packed>>16, packed>>8 & 255)))
                
        # make the .out file
    with open(file_out, mode='w') as fout:
            # very simple. Again not efficient, but we don't care here
        fout.write('--Sorted Max 32 Values--\n')
            # sort and output the last 32 values
        for value in sorted(data)[-32:]:
            fout.write("{}\n".format(value))
        
        fout.write('--Last 32 Values--\n')
            # output the most recent 32 values
        for value in data[-32:]:
            fout.write("{}\n".format(value))

    print("Created test{}".format(file_id))
        # do it again
    file_id+=1
    test_num+=1
